sequence(e) ::= "<e; separator=\"\n\">"

str_const(index, word_dim, int_const_name, text, tag) ::= <<
str_const<index>:
    .word <tag>
    .word <word_dim>
    .word String_dispTab
    .word <int_const_name>
    .asciiz "<text>"
    .align 2
>>

int_const(index, val, tag) ::= <<
int_const<index>:
    .word <tag>
    .word 4
    .word Int_dispTab
    .word <val>
>>

bool_const(tag) ::= <<
bool_const0:
    .word <tag>
    .word 4
    .word Bool_dispTab
    .word 0
bool_const1:
    .word <tag>
    .word 4
    .word Bool_dispTab
    .word 1
>>

program(data, text, int, string, bool) ::= <<
    .data
    .align 2
    .globl class_nameTab
    .globl Int_protObj
    .globl String_protObj
    .globl bool_const0
    .globl bool_const1
    .globl Main_protObj
    .globl _int_tag
    .globl _string_tag
    .globl _bool_tag
    _int_tag:
        .word <int>
    _string_tag:
        .word <string>
    _bool_tag:
        .word <bool>
    <sequence(data)>



    .globl  heap_start
    heap_start:
        .word   0
        .text
        .globl  Int_init
        .globl  String_init
        .globl  Bool_init
        .globl  Main_init
        .globl  Main.main
    Object_init:
        addiu   $sp $sp -12
        sw      $fp 12($sp)
        sw      $s0 8($sp)
        sw      $ra 4($sp)
        addiu   $fp $sp 4
        move    $s0 $a0
        move    $a0 $s0
        lw      $fp 12($sp)
        lw      $s0 8($sp)
        lw      $ra 4($sp)
        addiu   $sp $sp 12
        jr      $ra
    IO_init:
        addiu   $sp $sp -12
        sw      $fp 12($sp)
        sw      $s0 8($sp)
        sw      $ra 4($sp)
        addiu   $fp $sp 4
        move    $s0 $a0
        jal     Object_init
        move    $a0 $s0
        lw      $fp 12($sp)
        lw      $s0 8($sp)
        lw      $ra 4($sp)
        addiu   $sp $sp 12
        jr      $ra
    Int_init:
        addiu   $sp $sp -12
        sw      $fp 12($sp)
        sw      $s0 8($sp)
        sw      $ra 4($sp)
        addiu   $fp $sp 4
        move    $s0 $a0
        jal     Object_init
        move    $a0 $s0
        lw      $fp 12($sp)
        lw      $s0 8($sp)
        lw      $ra 4($sp)
        addiu   $sp $sp 12
        jr      $ra
    String_init:
        addiu   $sp $sp -12
        sw      $fp 12($sp)
        sw      $s0 8($sp)
        sw      $ra 4($sp)
        addiu   $fp $sp 4
        move    $s0 $a0
        jal     Object_init
        move    $a0 $s0
        lw      $fp 12($sp)
        lw      $s0 8($sp)
        lw      $ra 4($sp)
        addiu   $sp $sp 12
        jr      $ra
    Bool_init:
        addiu   $sp $sp -12
        sw      $fp 12($sp)
        sw      $s0 8($sp)
        sw      $ra 4($sp)
        addiu   $fp $sp 4
        move    $s0 $a0
        jal     Object_init
        move    $a0 $s0
        lw      $fp 12($sp)
        lw      $s0 8($sp)
        lw      $ra 4($sp)
        addiu   $sp $sp 12
        jr      $ra
    <sequence(text)>
>>

classnametab(tag) ::= <<
    class_nameTab:
        <sequence(tag)>
>>

classobjtab(tag) ::= <<
    class_objTab:
        <sequence(tag)>
>>

dispTab(name, e) ::= <<
<name>_dispTab:
    <e>
>>

protObj(index, e, name, dim) ::= <<
<name>_protObj:
	.word <index>
	.word <dim>
	.word <name>_dispTab
	<e>
>>

protObjBasic(io, int, string, bool) ::= <<
Object_protObj:
    .word   0
    .word   3
    .word   Object_dispTab

IO_protObj:
    .word   <io>
    .word   3
    .word   IO_dispTab

Int_protObj:
    .word   <int>
    .word   4
    .word   Int_dispTab
    .word   0
String_protObj:
    .word   <string>
    .word   5
    .word   String_dispTab
    .word   int_const0
    .asciiz ""
    .align  2
Bool_protObj:
    .word   <bool>
    .word   4
    .word   Bool_dispTab
    .word   0
>>

dispTabBasic() ::= <<
Object_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
IO_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
    .word   IO.out_string
    .word   IO.out_int
    .word   IO.in_string
    .word   IO.in_int
Int_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
String_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
    .word   String.length
    .word   String.concat
    .word   String.substr
Bool_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
>>

obj_init(e, name, parent) ::= <<
<name>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     <parent>_init
    <e>
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
>>
